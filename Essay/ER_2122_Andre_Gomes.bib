
@inproceedings{chung_non-functional_2000,
	title = {Non-{Functional} {Requirements} in {Software} {Engineering}},
	doi = {10.1007/978-1-4615-5269-7},
	abstract = {Decomposition methods for processes are described in [Nixon93, 94a, 97a], drawing on implementations of processes [Chung84, 88], and a fuller catalogue would include parameterized definitions too. HURTS HELPS HURTS HELPS Data Type [Target System] Implicit HELPS HURTS HURTS BREAKS ? Invocation [Target System] Pipe \& HELPS BREAKS BREAKS HELPS Filter WHEN [Target condl System] condl: size of data in domain is huge Figure 13.4. A generic Correlation Catalogue, based on [Garlan93]. Figure 13.3 shows a method which decomposes the topic on process, including algorithms as used in [Garlan93]. Decomposition methods for processes are also described in [Nixon93, 94a, 97a], drawing on implementations of processes [Chung84, 88]. These two method definitions are unparameterized. A fuller catalogue would include parameterized definitions too. Operationalization methods, which organize knowledge about satisficing NFR softgoals, are embedded in architectural designs when selected. For example, an ImplicitFunctionlnvocationRegime (based on [Garlan93]' architecture 3) can be used to hide implementation details in order to make an architectural 358 NON-FUNCTIONAL REQUIREMENTS IN SOFTWARE ENGINEERING design more extensible, thus contributing to one of the softgoals in the above decomposition. Argumentation methods and templates are used to organize principles and guidelines for making design rationale for or against design decisions (Cf. [J. Lee91]).},
	booktitle = {International {Series} in {Software} {Engineering}},
	author = {Chung, L. and Nixon, B. and Yu, E. and Mylopoulos, J.},
	year = {2000},
	file = {Chung et al. - 2000 - Non-Functional Requirements in Software Engineerin.pdf:C\:\\Users\\andre\\Zotero\\storage\\JJHHYNYX\\Chung et al. - 2000 - Non-Functional Requirements in Software Engineerin.pdf:application/pdf},
}

@inproceedings{chung_non-functional_2009,
	title = {On {Non}-{Functional} {Requirements} in {Software} {Engineering}},
	doi = {10.1007/978-3-642-02463-4_19},
	abstract = {This chapter reviews the state of the art on the treatment of non-functional requirements (hereafter, NFRs), while providing some prospects for future directions. Essentially a software system's utility is determined by both its functionality and its non-functional characteristics, such as usability, flexibility, performance, interoperability and security. Nonetheless, there has been a lop-sided emphasis in the functionality of the software, even though the functionality is not useful or usable without the necessary non-functional characteristics. In this chapter, we review the state of the art on the treatment of non-functional requirements (hereafter, NFRs), while providing some prospects for future directions.},
	booktitle = {Conceptual {Modeling}: {Foundations} and {Applications}},
	author = {Chung, L. and Leite, Julio Cesar Sampaio do Prado},
	year = {2009},
	file = {Chung and Leite - 2009 - On Non-Functional Requirements in Software Enginee.pdf:C\:\\Users\\andre\\Zotero\\storage\\KY7FYFVZ\\Chung and Leite - 2009 - On Non-Functional Requirements in Software Enginee.pdf:application/pdf},
}

@article{cysneiros_non-functional_2019,
	title = {Non-{Functional} {Requirements} {Elicitation}},
	doi = {10.35940/ijrte.b1218.0982s1119},
	abstract = {Survey on different approaches proposed for Non-Functional requirements analysis is presented and it is shown that different approaches may lead to different results. Non-Functional requirements elicitation is one of the most important activity in requirements engineering. Non-functional requirements define the quality attributes of software system. If this analysis is not done properly, it may cause for problems in further phases that in turn may lead to failure of the software. Hence the non-functional requirements analysis has to be given at most priority in software development. This paper presents survey on different approaches proposed for Non-Functional requirements analysis},
	journal = {International Journal of Recent Technology and Engineering},
	author = {Cysneiros, Luiz and Yu, Eric},
	year = {2019},
	file = {2019 - Non-Functional Requirements Elicitation.pdf:C\:\\Users\\andre\\Zotero\\storage\\ABLF8LKD\\2019 - Non-Functional Requirements Elicitation.pdf:application/pdf},
}

@article{horkoff_non-functional_2019,
	title = {Non-{Functional} {Requirements} for {Machine} {Learning}: {Challenges} and {New} {Directions}},
	shorttitle = {Non-{Functional} {Requirements} for {Machine} {Learning}},
	doi = {10.1109/RE.2019.00050},
	abstract = {Challenges and a proposed research agenda for the exploration of NFRs for ML-based solutions are outlined, including how these qualities are decomposed into sub-qualities. Machine Learning (ML) provides approaches which use big data to enable algorithms to "learn", producing outputs which would be difficult to obtain otherwise. Despite the advances allowed by ML, much recent attention has been paid to certain qualities of ML solutions, particularly fairness and transparency, but also qualities such as privacy, security, and testability. From a requirements engineering (RE) perspective, such qualities are also known as non-functional requirements (NFRs). In RE, the meaning of certain NFRs, how to refine those NFRs, and how to use NFRs for design and runtime decision making over traditional software is relatively well established and understood. However, in a context where the solution involves ML, much of our knowledge about NFRs no longer applies. First, the types of NFRs we are concerned with undergo a shift: NFRs like fairness and transparency become prominent, whereas other NFRs such as modularity may become less relevant. The meanings and interpretations of NFRs in an ML context (e.g., maintainability, interoperability, and usability) must be rethought, including how these qualities are decomposed into sub-qualities. Trade-offs between NFRs in an ML context must be re-examined. Beyond the changing landscape of NFRs, we can ask if our known approaches to understanding, formalizing, modeling, and reasoning over NFRs at design and runtime must also be adjusted, or can be applied as-is to this new area? Given these questions, this work outlines challenges and a proposed research agenda for the exploration of NFRs for ML-based solutions.},
	journal = {2019 IEEE 27th International Requirements Engineering Conference (RE)},
	author = {Horkoff, Jennifer},
	year = {2019},
	annote = {Annotations(25/06/2022, 17:37:34)
“Further, as-yet-unexplored NFRs such as “retrainability” may also become relevant.” (Horkoff, 2019, p. 386)
“The overall function or purpose of an ML application is much more focused; e.g., recognize a face or diagnose a disease. Thus, there are far fewer FRs, and ML research has focused on the NFRs associated directly with those key FRs, e.g., accuracy of facial recognition, performance of diagnosis.” (Horkoff, 2019, p. 386)
“one can think of NFRs as the requirements over the quality, e.g., the quality is usability of system X, while the NFR is “System X must be usable”, which ideally should be defined in a measurable way, e.g., “90\% of test users would rate the system as an 8/10 in terms of usability”.” (Horkoff, 2019, p. 387)
(Horkoff, 2019, p. 387) Base NFR for ML to specify
“Fairness. Recent work has focused on technical solutions to make ML algorithms more fair,” (Horkoff, 2019, p. 387)
“Transparency.” (Horkoff, 2019, p. 388)
“Other NFRs for ML, such as sustainability or maintainability, have not seen significant attention.” (Horkoff, 2019, p. 388)
Can also be applied to source code
“Similarly, we are not aware of approaches for explicitly monitoring ML implementations at runtime, or considerations of what exactly runtime monitoring may mean in this context.” (Horkoff, 2019, p. 388)
Source code has it, but is different n the case of ML
“Finally, this model considers only design-time decisions, not covering runtime monitoring, or re-design or evolution in the face of change.” (Horkoff, 2019, p. 389)
“how to define and refine NFRs in MLspecific contexts.” (Horkoff, 2019, p. 389)
“retraining, optimizations, networks, supervision” (Horkoff, 2019, p. 389)
},
	file = {Horkoff - 2019 - Non-Functional Requirements for Machine Learning .pdf:C\:\\Users\\andre\\Zotero\\storage\\MWJHAT3Q\\Horkoff - 2019 - Non-Functional Requirements for Machine Learning .pdf:application/pdf},
}

@inproceedings{kopczynska_importance_2020,
	title = {On {Importance} of {Non}-functional {Requirements} in {Agile} {Software} {Projects} - {A} {Survey}},
	doi = {10.1007/978-3-030-26574-8_11},
	abstract = {It is found that over 77\% of respondents perceive having NFRs defined in Agile software project as at least important, and for 30\% it is critical, and the perceived importance of N FRs increases with the increase of respondents’ experience. Context. Among many Agile software development practices, over 30 concern Requirements Engineering (RE). However, none of them mentions explicitly non-functional requirements (NFRs). The question arises – how important are NFRs in Agile software projects? Method. We conducted a survey asking Agile software development practitioners how they perceive the importance of having NFRs defined in their projects. Then, we juxtaposed the answers with their opinions on the perceived importance of 31 Agile RE practices. Results. The opinions of 118 respondents from a wide range of countries around the globe allowed us to determine how important it is to define NFRs. Moreover, we showed their importance from the perspective of the ranking of Agile RE practices. We also identified some relationships between the demographic data such as experience and the perceived importance of requirements concerning quality. Conclusions. We found that over 77\% of respondents perceive having NFRs defined in Agile software project as at least important, and for 30\% it is critical. Also, the perceived importance of NFRs increases with the increase of respondents’ experience.},
	booktitle = {Integrating {Research} and {Practice} in {Software} {Engineering}},
	author = {Kopczynska, Sylwia and Ochodek, Miroslaw and Nawrocki, J.},
	year = {2020},
	file = {Kopczynska et al. - 2020 - On Importance of Non-functional Requirements in Ag.pdf:C\:\\Users\\andre\\Zotero\\storage\\JEESLY9Y\\Kopczynska et al. - 2020 - On Importance of Non-functional Requirements in Ag.pdf:application/pdf},
}

@article{habibullah_non-functional_2021,
	title = {Non-functional {Requirements} for {Machine} {Learning}: {Understanding} {Current} {Use} and {Challenges} in {Industry}},
	shorttitle = {Non-functional {Requirements} for {Machine} {Learning}},
	doi = {10.1109/RE51729.2021.00009},
	abstract = {The state-of-the-art and challenges of dealing with NFRs for ML in industry are understood and a picture of how ML-related N FRs are treated in practice is painted and helps to guide future RE for ML efforts. Machine Learning (ML) is an application of Artificial Intelligence (AI) that uses big data to produce complex predictions and decision-making systems, which would be challenging to obtain otherwise. To ensure the success of ML-enabled systems, it is essential to be aware of certain qualities of ML solutions (performance, transparency, fairness), known from a Requirement Engineering (RE) perspective as non-functional requirements (NFRs). However, when systems involve ML, NFRs for traditional software may not apply in the same ways; some NFRs may become more prominent or less important; NFRs may be defined over the ML model, data, or the entire system; and NFRs for ML may be measured differently. In this work, we aim to understand the state-of-the-art and challenges of dealing with NFRs for ML in industry. We interviewed ten engineering practitioners working with NFRs and ML. We find examples of (1) the identification and measurement of NFRs for ML, (2) identification of more and less important NFRs for ML, and (3) the challenges associated with NFRs and ML in the industry. This knowledge paints a picture of how ML-related NFRs are treated in practice and helps to guide future RE for ML efforts.},
	journal = {2021 IEEE 29th International Requirements Engineering Conference (RE)},
	author = {Habibullah, K. M. and Horkoff, Jennifer},
	year = {2021},
	annote = {Annotations(26/06/2022, 12:49:40)
“some NFRs, such as fairness, become more prominent, others, such as privacy, remain relevant, and perhaps others, such as usability, become less relevant. Further, as-yet-unexplored NFRs such as “retrainability” may also become relevant.” (Habibullah and Horkoff, 2021, p. 1)“RE is the most challenging activity for ML-enabled software development [15].” (Habibullah and Horkoff, 2021, p. 1)“However, we are unable to find work which focuses explicitly on how NFRs are dealt with in an industrial ML-context.” (Habibullah and Horkoff, 2021, p. 1)“we find that currently, industry cannot offer many extensive or well-established solutions in how to identify, scope, or measure NFRs for ML.” (Habibullah and Horkoff, 2021, p. 2)“Heyn et al. used three real use cases of distributed deep learning to describe system engineering challenges relating to requirements engineering [17]. They specifically focus on challenges concerning AI context, defining data quality attributes, testing/monitoring/reporting, and human factors.” (Habibullah and Horkoff, 2021, p. 2)“Further, as emphasized by Vogelsang \& Borg, RE for ML should focus not only on requirements for the system, but on requirements over the data [18].” (Habibullah and Horkoff, 2021, p. 3)“Prominent NFRs according to our interviews include fairness, but also flexibility, usability, accuracy, efficiency, correctness, reliability, and testability.” (Habibullah and Horkoff, 2021, p. 6)“Furthermore, some NFRs without so much emphasis in the literature made an appearance, such as retrainability, justifiablity and testability.” (Habibullah and Horkoff, 2021, p. 9)“The result also indicate that both engineers and customers lack knowledge and expertise in regards to NFRs for ML. There are a lack of documentation, methods, and benchmarks to define and measure NFRs for ML-enabled software. Thus, this is a new area of exploration for our interview participants.” (Habibullah and Horkoff, 2021, p. 9)“We need further work which focuses on those NFRs with a newly increased focus in an ML context, e.g., fairness, explainability/transparency, bias, justifiability, and testability. This includes definitions, new taxonomies, measurements, and methods. Such work has already begun for some NFRs (e.g., [37] for fairness, [27] for transparency), but it is often approached from a general SE, rather than an RE perspective.” (Habibullah and Horkoff, 2021, p. 9)},
	file = {Habibullah and Horkoff - 2021 - Non-functional Requirements for Machine Learning .pdf:C\:\\Users\\andre\\Zotero\\storage\\HKVLM5KB\\Habibullah and Horkoff - 2021 - Non-functional Requirements for Machine Learning .pdf:application/pdf},
}

@article{challa_faulty_2020,
	title = {Faulty {Requirements} {Made} {Valuable}: {On} the {Role} of {Data} {Quality} in {Deep} {Learning}},
	shorttitle = {Faulty {Requirements} {Made} {Valuable}},
	doi = {10.1109/AIRE51212.2020.00016},
	abstract = {This work alters stationarity of the multivariate time-series data, and analyzes how the stationarity changes affect the behavior of a recurrent neural network in the context of predicting combined sewer overflow, to shed light on the active role RE plays in deep learning. Large collections of data help evolve deep learning into the state-of-the-art in solving many artificial intelligence problems. However, the requirements engineering (RE) community has yet to adapt to such sweeping changes caused exclusively by data. One reason is that the traditional requirements quality like unambiguity becomes less applicable to data, and so do requirements fault detection techniques like inspections. In this paper, we view deep learning as a class of machines whose effects must be evaluated with direct consideration of inherent data quality attributes: accuracy, consistency, currentness, etc. We substantiate this view by altering stationarity of the multivariate time-series data, and by further analyzing how the stationarity changes affect the behavior of a recurrent neural network in the context of predicting combined sewer overflow. Our work sheds light on the active role RE plays in deep learning.},
	journal = {2020 IEEE Seventh International Workshop on Artificial Intelligence for Requirements Engineering (AIRE)},
	author = {Challa, Harshitha and Niu, Nan and Johnson, Reese},
	year = {2020},
	file = {Challa et al. - 2020 - Faulty Requirements Made Valuable On the Role of .pdf:C\:\\Users\\andre\\Zotero\\storage\\GEDIWQYM\\Challa et al. - 2020 - Faulty Requirements Made Valuable On the Role of .pdf:application/pdf},
}

@article{dalpiaz_requirements_2020,
	title = {Requirements {Engineering} in the {Days} of {Artificial} {Intelligence}},
	doi = {10.1109/MS.2020.2986047},
	abstract = {Over the years, many AI techniques have been employed to represent and analyze requirements, ranging from knowledge representation and reasoning in the 1980s to the use of natural language processing, machine learning, and deep learning since the 2000s. Artificial Intelligence (AI) has a long tradition in software and requirements engineering (RE). Over the years, many AI techniques have been employed to represent and analyze requirements, ranging from knowledge representation and reasoning in the 1980s to the use of natural language (NL) processing, machine learning, and deep learning since the 2000s. AI techniques have been successfully applied in practice, for example, to manage large-volume requirements.1},
	journal = {IEEE Software},
	author = {Dalpiaz, F. and Niu, Nan},
	year = {2020},
	file = {Dalpiaz and Niu - 2020 - Requirements Engineering in the Days of Artificial.pdf:C\:\\Users\\andre\\Zotero\\storage\\2ZNH4S5D\\Dalpiaz and Niu - 2020 - Requirements Engineering in the Days of Artificial.pdf:application/pdf},
}

@misc{borg_requirements_2019,
	title = {Requirements {Engineering} for {Machine} {Learning}: {Perspectives} from {Data} {Scientists}},
	shorttitle = {Requirements {Engineering} for {Machine} {Learning}},
	url = {https://mrksbrg.com/aire19-vogelsang/},
	abstract = {We present an interview study on characteristics and challenges unique to requirements engineering for systems driven by machine learning.},
	language = {en-US},
	urldate = {2022-06-26},
	journal = {Markus Borg},
	author = {Borg, Markus},
	month = sep,
	year = {2019},
	annote = {“Explainability is important for any software system that offers automated decision-making. However, ML systems are different compared systems implemented in human-written source code. To update the decision-making of conventional software, the developers must understand the source code. For ML systems, on the other hand, a developer usually doesn’t change the code of the ML algorithm to influence the output, but instead manipulates the training data. The interplay between data and algorithms must be explained.“
Explainability has a different meaning in the case of ML systems
Freedom from discrimination is crucial, but what it means is highly context-dependent. First of all, ML systems are designed to discriminate,  i.e., they identify recurring patterns in data stereotypes and apply them when judging new input. However, some forms of discrimination are unacceptable in society –  or even forbidden by law. Filtering loan applications by race or gender is not allowed, but the same features might be essential in a medical system. Requirements engineers must understand when and how to discriminate.

},
	file = {Snapshot:C\:\\Users\\andre\\Zotero\\storage\\KKLU3V5L\\aire19-vogelsang.html:text/html},
}

@book{edgar_research_2017,
	title = {Research {Methods} for {Cyber} {Security}},
	abstract = {Research Methods for Cyber Security teaches scientific methods for generating impactful knowledge, validating theories, and adding critical rigor to the cyber security field. This book shows how to develop a research plan, beginning by starting research with a question, then offers an introduction to the broad range of useful research methods for cyber security research: observational, mathematical, experimental, and applied. Each research method chapter concludes with recommended outlines and suggested templates for submission to peer reviewed venues. This book concludes with information on cross-cutting issues within cyber security research. Cyber security research contends with numerous unique issues, such as an extremely fast environment evolution, adversarial behavior, and the merging of natural and social science phenomena. Research Methods for Cyber Security addresses these concerns and much more by teaching readers not only the process of science in the context of cyber security research, but providing assistance in execution of research as well. Presents research methods from a cyber security science perspective; Catalyzes the rigorous research necessary to propel the cyber security field forward; Provides a guided method selection for the type of research being conducted, presented in the context of real-world usage.},
	author = {Edgar, T.W. and Manz, D.O.},
	month = apr,
	year = {2017},
	note = {Journal Abbreviation: Research Methods for Cyber Security
Pages: 404
Publication Title: Research Methods for Cyber Security},
	annote = {What is Machine Learning
Machine learning is a field of study that looks at using computational algorithms to turn empirical data into usable models. The machine learning field grew out of traditional statistics and artificial intelligences communities. From the efforts of mega corporations such as Google, Microsoft, Facebook, Amazon, and so on, machine learning has become one of the hottest computational science topics in the last decade. Through their business processes immense amounts of data have been and will be collected. This has provided an opportunity to re-invigorate the statistical and computational approaches to autogenerate useful models from data.
Machine learning algorithms can be used to (a) gather understanding of the cyber phenomenon that produced the data under study, (b) abstract the understanding of underlying phenomena in the form of a model, (c) predict future values of a phenomena using the above-generated model, and (d) detect anomalous behavior exhibited by a phenomenon under observation. There are several open-source implementations of machine learning algorithms that can be used with either application programming interface (API) calls or nonprogrammatic applications. Examples of such implementations include Weka,1 Orange,2 and RapidMiner.3 The results of such algorithms can be fed to visual analytic tools such as Tableau4 and Spotfire5 to produce dashboards and actionable pipelines.
Cyber space and its underlying dynamics can be conceptualized as a manifestation of human actions in an abstract and high-dimensional space. In order to begin solving some of the security challenges within cyber space, one needs to sense various aspects of cyber space and collect data.6 The observational data obtained is usually large and increasingly streaming in nature. Examples of cyber data include error logs, firewall logs, and network flow.
},
}

@article{linardatos_explainable_2021,
	title = {Explainable {AI}: {A} {Review} of {Machine} {Learning} {Interpretability} {Methods}},
	shorttitle = {Explainable {AI}},
	doi = {10.3390/e23010018},
	abstract = {This study focuses on machine learning interpretability methods; more specifically, a literature review and taxonomy of these methods are presented, as well as links to their programming implementations, in the hope that this survey would serve as a reference point for both theorists and practitioners. Recent advances in artificial intelligence (AI) have led to its widespread industrial adoption, with machine learning systems demonstrating superhuman performance in a significant number of tasks. However, this surge in performance, has often been achieved through increased model complexity, turning such systems into “black box” approaches and causing uncertainty regarding the way they operate and, ultimately, the way that they come to decisions. This ambiguity has made it problematic for machine learning systems to be adopted in sensitive yet critical domains, where their value could be immense, such as healthcare. As a result, scientific interest in the field of Explainable Artificial Intelligence (XAI), a field that is concerned with the development of new methods that explain and interpret machine learning models, has been tremendously reignited over recent years. This study focuses on machine learning interpretability methods; more specifically, a literature review and taxonomy of these methods are presented, as well as links to their programming implementations, in the hope that this survey would serve as a reference point for both theorists and practitioners.},
	journal = {Entropy},
	author = {Linardatos, Pantelis and Papastefanopoulos, Vasilis and Kotsiantis, S.},
	year = {2021},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\WNCFHFIZ\\Linardatos et al. - 2021 - Explainable AI A Review of Machine Learning Inter.pdf:application/pdf},
}
